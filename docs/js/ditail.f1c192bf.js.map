{"version":3,"sources":["webpack:///./src/utils/request.js","webpack:///./src/views/locustReport/detail.vue","webpack:///./src/views/locustReport/detail.vue?33f8","webpack:///./src/api/locustReport.js"],"names":["allURL","process","VUE_APP_FLAG","VUE_APP_BASEURL","request","axios","create","baseURL","timeout","defaults","headers","post","errorHandler","error","response","data","token","localStorage","getItem","status","notification","message","description","window","location","href","result","isLogin","reload","router","useRouter","push","Promise","reject","interceptors","use","config","srcdoc","htmlText","style","setup","query","currentRoute","value","locustReport","id","then","res","__exports__","render","locustReportGet","method","url","params","locustReportDetail","locustReportDel"],"mappings":"sHAQIA,E,6CAEFA,EAD8B,OAA5BC,4CAAYC,aACLD,4CAAYE,gBAEZ,yCAKX,IAAMC,EAAUC,IAAMC,OAAO,CAE3BC,QAASP,EACTQ,QAAS,MAEXJ,EAAQK,SAASC,QAAQC,KAAK,gBAAkB,iCAEhD,IAAMC,EAAe,SAACC,GACpB,GAAIA,EAAMC,SAAU,CAClB,IAAMC,EAAOF,EAAMC,SAASC,KAEtBC,EAAQC,aAAaC,QAAQ,SAWnC,GAV8B,MAA1BL,EAAMC,SAASK,SACjBC,OAAaP,MAAM,CACjBQ,QAAS,YACTC,YAAaP,EAAKM,UAEpBE,OAAOC,SAASC,KAAK,WAKO,MAA1BZ,EAAMC,SAASK,UAAoBJ,EAAKW,SAAUX,EAAKW,OAAOC,SAAU,CAC1EP,OAAaP,MAAM,CACjBQ,QAAS,eACTC,YAAa,sCAGXN,GAKFO,OAAOC,SAASI,SAIlB,IAAMC,EAASC,iBACfD,EAAOE,KAAK,WAIhB,OAAOC,QAAQC,OAAOpB,IAIxBT,EAAQ8B,aAAa9B,QAAQ+B,KAAI,SAAAC,GAC/B,IAAMpB,EAAQC,aAAaC,QAAQ,SAMnC,OAHIF,IACFoB,EAAO1B,QAAQ,iBAAmBM,GAE7BoB,IACNxB,GAGHR,EAAQ8B,aAAapB,SAASqB,KAAI,SAACrB,GAIjC,MAH2B,iBAAjBA,EAASC,OACjBD,EAASC,KAAK,UAAYD,EAASK,QAE9BL,EAASC,OACfH,GASYR,U,sHCtFX,eAAsE,UAA7DiC,OAAQ,EAAAC,SAAUC,MAAA,8B,sCAQd,iBAAgB,CAC7BC,MAD6B,WAGzB,IAAIF,EAAU,iBACPG,EAAQ,iBAAYC,aAAaC,MAAMF,MAOhD,OANG,OAAAG,EAAA,MAAmBH,EAAMI,IAAIC,MAAK,SAACC,GACjCT,EAASK,MAAMI,KAKb,CACLT,e,qBCjBR,MAAMU,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,gB,kCCPf,sHACO,SAASC,EAAgBnC,GAC5B,OAAOX,OAAQA,QAAQ,CACnB+C,OAAQ,MACRC,IAAK,gBACLC,OAAQtC,IAGT,SAASuC,EAAmBT,GAC/B,OAAOzC,OAAQA,QAAQ,CACnB+C,OAAQ,MACRC,IAAK,gBAAkBP,IAMxB,SAASU,EAAgBV,GAC5B,OAAOzC,OAAQA,QAAQ,CACnB+C,OAAQ,SACRC,IAAK,gBAAkBP,EAAI","file":"js/ditail.f1c192bf.js","sourcesContent":["import axios from 'axios'\r\n// import store from '@/store'\r\n// import storage from 'store'\r\nimport notification from 'ant-design-vue/es/notification'\r\n// import { VueAxios } from './axios'\r\n// import { token } from '@/store/mutation-types'\r\nimport { useRouter } from 'vue-router';\r\n\r\nlet allURL;\r\nif (process.env.VUE_APP_FLAG == \"dev\") {\r\n  allURL = process.env.VUE_APP_BASEURL;\r\n} else{\r\n  allURL = \"https://www.zaojingyoutu.top:8002/api/\";\r\n}\r\n\r\n\r\n// 创建 axios 实例\r\nconst request = axios.create({\r\n  // API 请求的默认前缀\r\n  baseURL: allURL,\r\n  timeout: 300000 // 请求超时时间\r\n})\r\nrequest.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8';//配置请求头信息。\r\n// 异常拦截处理器\r\nconst errorHandler = (error) => {\r\n  if (error.response) {\r\n    const data = error.response.data\r\n    // 从 localstorage 获取 token\r\n    const token = localStorage.getItem(\"token\")\r\n    if (error.response.status === 403) {\r\n      notification.error({\r\n        message: 'Forbidden',\r\n        description: data.message\r\n      })\r\n      window.location.href=\"#/login\";\r\n      // const router = useRouter();\r\n      // router.push(\"/login\")\r\n\r\n    }\r\n    if (error.response.status === 401 && !(data.result && data.result.isLogin)) {\r\n      notification.error({\r\n        message: 'Unauthorized',\r\n        description: 'Authorization verification failed'\r\n\r\n      })\r\n      if (token) {\r\n        // store.dispatch('Logout').then(() => {\r\n        //   setTimeout(() => {\r\n        //     window.location.reload()\r\n        //   }, 1500)\r\n        window.location.reload()\r\n        // })\r\n      }\r\n      // window.location.href=\"/login\";\r\n      const router = useRouter();\r\n      router.push(\"/login\")\r\n    }\r\n\r\n  }\r\n  return Promise.reject(error)\r\n}\r\n\r\n// request interceptor\r\nrequest.interceptors.request.use(config => {\r\n  const token = localStorage.getItem(\"token\")\r\n  // 如果 token 存在\r\n  // 让每个请求携带自定义 token 请根据实际情况自行修改\r\n  if (token) {\r\n    config.headers['Authorization'] = token\r\n  }\r\n  return config\r\n}, errorHandler)\r\n\r\n// response interceptor\r\nrequest.interceptors.response.use((response) => {\r\n  if(typeof response.data != 'string'){\r\n    response.data['status'] = response.status\r\n}\r\n  return response.data\r\n}, errorHandler)\r\n\r\n// const installer = {\r\n//   vm: {},\r\n//   install (Vue) {\r\n//     Vue.use(VueAxios, request)\r\n//   }\r\n// }\r\n\r\nexport default request\r\n\r\n// export {\r\n//   // installer as VueAxios,\r\n//   request as axios\r\n// }\r\n","\r\n<template>\r\n    <iframe :srcdoc=\"htmlText\" style=\"width: 100%;height: 85vh;\"></iframe>\r\n</template>\r\n\r\n<script>\r\n  import { defineComponent,ref } from \"vue\";\r\n  import { locustReportDetail } from \"@/api/locustReport\";\r\n  import {useRouter } from 'vue-router';\r\n\r\n  export default defineComponent({\r\n    setup() {\r\n\r\n        let htmlText =ref()\r\n         const query = useRouter().currentRoute.value.query;\r\n         locustReportDetail(query.id).then((res) => {\r\n           htmlText.value=res\r\n        })\r\n       \r\n     \r\n  \r\n      return {\r\n        htmlText,\r\n      };\r\n  }});\r\n</script>\r\n","import { render } from \"./detail.vue?vue&type=template&id=4f69fe20\"\nimport script from \"./detail.vue?vue&type=script&lang=js\"\nexport * from \"./detail.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\zjy\\\\GitHub\\\\vue_apitest\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import request from '@/utils/request'\r\nexport function locustReportGet(data){\r\n    return request.request({\r\n        method: \"get\",\r\n        url: \"locustReport/\",\r\n        params: data,\r\n    })\r\n}\r\nexport function locustReportDetail(id){\r\n    return request.request({\r\n        method: \"get\",\r\n        url: \"locustReport/\" + id,\r\n\r\n    })\r\n}\r\n\r\n\r\nexport function locustReportDel(id){\r\n    return request.request({\r\n        method: \"delete\",\r\n        url: \"locustReport/\" + id +\"/\",\r\n    })\r\n}"],"sourceRoot":""}